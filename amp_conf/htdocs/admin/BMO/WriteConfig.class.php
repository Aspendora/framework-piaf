<?php
// vim: set ai ts=4 sw=4 ft=php:

/**
 * Writes Config Files
 *
 * Copyright 2013 Rob Thomas <rob.thomas@schmoozecom.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package   FreePBX BMO
 * @author    Rob Thomas <rob.thomas@schmoozecom.com>
 * @license   AGPL v3
 */


/**
 * WriteConfig class for FreePBX BMO
 * This writes configuration files to /etc/asterisk 
 */
class WriteConfig {

	/**
	 * Header gets added to every generated file
	 */
	const HEADER = ";--------------------------------------------------------------------------------;
;          Do NOT edit this file as it is auto-generated by FreePBX.             ;
;--------------------------------------------------------------------------------;
; For information on adding additional paramaters to this file, please visit the ;
; FreePBX.org wiki page, or ask on IRC. This file was created by the new FreePBX ;
; BMO - Big Module Object. Any similarity in naming with BMO from Adventure Time ;
; is totally deliberate.                                                         ;
;--------------------------------------------------------------------------------;
";

	/**
	 * __construct function
	 * 
	 */
	public function __construct($freepbx = null, $array = null) {
		if ($freepbx == null)
			throw new Exception("Need to be instantiated with a FreePBX Object");

		if ($array !== null) {
			$this->writeConfigs($array);
		}
	}

	/**
	 * Write single configuration file
	 *
	 * Simply builds an array to give to writeConfigs()
	 * @param string $filename File to write
	 * @param string|array $contents What should be written to the file
	 * @return void
	 * @access public
	 */
	public function writeConfig($filename = null, $contents) {
		if ($filename == null)
			throw new Exception("No filename given to writeConfig. This is a bug");

		$this->writeConfigs(array($filename => $contents));
	}

	/**
	 * Write multiple configuration files.
	 * This is the public call to write configuration files.
	 * @param array $array An array of [filename]=>array(line, line, line), or [filename]=>string 
	 * @return void  
	 * @access public
	 */
	public function writeConfigs($array) {
		foreach ($array as $file => $contents) {
			$this->writeFile($this->validateFilename($file), $contents);
		}
	}

	/**
	 * Ensure filename is safe to write
	 * @param string $file Filename (without any directory)
	 * @return string Returns full path to file
	 * @access private  
	 */
	private function validateFilename($file) {
		// Check to make sure it doesn't have any /'s or ..'s 
		// in it. We're only allowed to write to /etc/asterisk

		if (strpos($file, "/") !== false)
			throw new Exception("$filename contains a /");
		if (strpos($file, "..") !== false)
			throw new Exception("$filename contains ..");

		$filename = "/etc/asterisk/$file";
		if (is_link($filename)) {
//			if (defined('DEVELOPMENT')) {
				$filename = readlink($filename);
//			} else {
//				throw new Exception("$filename is a symlink, not clobbering. Define DEVELOPMENT to avoid");
//			}
		}
		return $filename;
	}

	/**
	 * Actually write the file
	 * @param string $filename Full path to file
	 * @param mixed $contents String or Array to write to the file
	 * @return boolean Always returns true, unless it throws and exception
	 * @access private
	 */
	private function writeFile($filename, $contents) {
		if ($contents === false) {
			// False means 'delete'
			unlink($filename);
			return true;
		}

		$header = "";
		if (is_array($contents)) {
			// It's an array of things.
			//
			// It should be array('object' => array('line', 'line', 'line'))
			//    or
			// array('object' => 'string\nstring\n')
			//
			// Note that the magic item 'HEADER' will be placed at the start of the file,
			// after the default 'Generated by FreePBX' header.
			//
			$output = "\n";
			foreach ($contents as $title => $item) {
				if ($title == "HEADER") {
					if (is_array($item)) {
						$header = implode("\n", $item)."\n";
					} else {
						$header = $item."\n";
					}
				} else {
					$output .= "[$title]\n";
					if (is_array($item)) {
						foreach ($item as $i => $v) {
							if (is_array($v)) {
								// Multiple settings to the same key
								foreach ($v as $opt) {
									$output .= "$i = $opt\n";
								}
							} else {
								$output .= "$v\n";
							}
						}
					} else {
						$output .= $item;
					}
					$output .= "\n";
				}
			}
		} else {
			$output = $contents;
		}

		// Now I have a string, and can write it out.
		// print "Writing: ".$this->getHeader().$header.$output."\n";
		file_put_contents($filename, $this->getHeader().$header.$output);
		return true;
	}

	/**
	 * Return the static header, as a function.
	 * @return string Header
	 * @access public 
	 */
	public function getHeader() {
		return self::HEADER;
	}
}

